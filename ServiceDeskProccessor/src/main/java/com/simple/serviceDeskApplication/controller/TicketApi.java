/**
 * NOTE: This class is auto generated by the swagger code generator program (2.3.1).
 * https://github.com/swagger-api/swagger-codegen
 * Do not edit the class manually.
 */
package com.simple.serviceDeskApplication.controller;

import com.simple.serviceDeskApplication.model.TicketDTO;
import io.swagger.annotations.*;
import org.springframework.http.ResponseEntity;
import org.springframework.validation.annotation.Validated;
import org.springframework.web.bind.annotation.PathVariable;
import org.springframework.web.bind.annotation.RequestBody;
import org.springframework.web.bind.annotation.RequestHeader;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RequestMethod;
import org.springframework.web.bind.annotation.RequestParam;
import org.springframework.web.bind.annotation.RequestPart;
import org.springframework.web.multipart.MultipartFile;

import javax.validation.Valid;
import javax.validation.constraints.*;
import java.util.List;
@javax.annotation.Generated(value = "io.swagger.codegen.languages.SpringCodegen", date = "2019-10-13T23:17:39.731+03:00")

@Api(value = "ticket", description = "the ticket API")
public interface TicketApi {

    @ApiOperation(value = "Delete a ticket", nickname = "delete", notes = "", response = Boolean.class, tags={ "ticket", })
    @ApiResponses(value = { 
        @ApiResponse(code = 200, message = "Ticket successfully deleted", response = Boolean.class),
        @ApiResponse(code = 400, message = "Validation error") })
    @RequestMapping(value = "/ticket",
        produces = { "application/json" }, 
        consumes = { "application/json" },
        method = RequestMethod.DELETE)
    ResponseEntity<Boolean> delete(@ApiParam(value = "The ticket data" ,required=true )  @Valid @RequestBody TicketDTO ticket);


    @ApiOperation(value = "Gets a list of tickets", nickname = "getAllList", notes = "Get All Ticket List", response = TicketDTO.class, responseContainer = "List", tags={ "ticket", })
    @ApiResponses(value = { 
        @ApiResponse(code = 200, message = "List of all users", response = TicketDTO.class, responseContainer = "List") })
    @RequestMapping(value = "/ticket",
        produces = { "application/json" }, 
        consumes = { "*/*" },
        method = RequestMethod.GET)
    ResponseEntity<List<TicketDTO>> getAllList();


    @ApiOperation(value = "Gets a list of tickets", nickname = "getByTicketNumber", notes = "Get All Ticket List", response = TicketDTO.class, tags={ "ticket", })
    @ApiResponses(value = { 
        @ApiResponse(code = 200, message = "List of all users", response = TicketDTO.class) })
    @RequestMapping(value = "/ticket/{ticketNumber}",
        produces = { "application/json" }, 
        consumes = { "*/*" },
        method = RequestMethod.GET)
    ResponseEntity<TicketDTO> getByTicketNumber(@ApiParam(value = "Given ticketNumber",required=true) @PathVariable("ticketNumber") String ticketNumber);


    @ApiOperation(value = "Creates a new ticket", nickname = "save", notes = "", response = TicketDTO.class, tags={ "ticket", })
    @ApiResponses(value = { 
        @ApiResponse(code = 200, message = "Ticket successfully created", response = TicketDTO.class),
        @ApiResponse(code = 400, message = "Validation error") })
    @RequestMapping(value = "/ticket",
        produces = { "application/json" }, 
        consumes = { "application/json" },
        method = RequestMethod.POST)
    ResponseEntity<TicketDTO> save(@ApiParam(value = "The ticket data" ,required=true )  @Valid @RequestBody TicketDTO ticket);


    @ApiOperation(value = "Update a ticket", nickname = "update", notes = "", response = TicketDTO.class, tags={ "ticket", })
    @ApiResponses(value = { 
        @ApiResponse(code = 200, message = "Ticket successfully updated", response = TicketDTO.class),
        @ApiResponse(code = 400, message = "Validation error") })
    @RequestMapping(value = "/ticket",
        produces = { "application/json" }, 
        consumes = { "application/json" },
        method = RequestMethod.PUT)
    ResponseEntity<TicketDTO> update(@ApiParam(value = "The ticket data" ,required=true )  @Valid @RequestBody TicketDTO ticket);

}
